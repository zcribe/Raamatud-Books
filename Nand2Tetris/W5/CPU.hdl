// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Instruction decoder. First bit 0=A, 1=C
    Not(in=instruction[15], out=AInst);
    Not(in=AInst, out=CInst);
    
    // ---First vertical line
    
    // Load ALU output? If C with a dest bit. 
    And(a=CInst, b=instruction[5], out=CwDest);
    Mux16(a=instruction, b=ALUout, sel=CwDest, out=A);
    
    // Load the A register? If C w dest or A. Output addressM
    Or(a=AInst, b=CwDest, out=Aload);
    ARegister(in=A, load=Aload, out=Aout, out[0..14]=addressM);
    
    // Write M? C inst and first dest bit
    And(a=CInst, b=instruction[3], out=writeM);
    
    // ---Second vertical line 
    
    // A/M? First ALU control bit decides.
    Mux16(a=Aout, b=inM, sel=instruction[12], out=AMout);
    
    // Do we load D? C instruction and second dest bit.
    And(a=CInst, b=instruction[4], out=Dload);
    DRegister(in=ALUout, load=Dload, out=Dout);
    
    ALU(x=Dout, y=AMout, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUout, out=outM,  zr=zero, ng=negative);
    
    
    // Jump conditionals - Increment or Jump?
    Or(a=negative, b=zero, out=ZorN);
    Not(in=ZorN, out=PnotZ);
    
    And(a=instruction[0], b=PnotZ, out=JGT);
    And(a=instruction[1], b=zero, out=JEQ);
    And(a=instruction[2], b=negative, out=JLT);
    
    Or(a=JLT, b=JEQ, out=J1);
    Or(a=J1, b=JGT, out=J2);
    And(a=CInst, b=J2, out=Jump);
    
    Not(in=Jump, out=Increment);
    
    PC(in=Aout, inc=Increment, reset=reset, load=Jump, out[0..14]=pc);
}
// D=D+1;JMP
// C instruction components
// 1110    011111     010      111 
// Op      ALUctrl   Dest      JMP

// 000 null  no jump
// 001 JGT   out>0
// 010 JEQ   out=0
// 011 JGE   out>=0
// 100 JLT   out<0
// 101 JNE   out!=0
// 110 JLE   out<=0
// 111 JMP   unconditional

// 000 increment
// 111 Jump to A
// *** A or increment
