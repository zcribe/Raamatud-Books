#lang sicp

;;; Ackermann's function.
(define (A x y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1)
                 (A x (- y 1))))))

(A 1 10)
;;; 1024
(A 2 4)
;;; 65536
(A 3 3)
;;; 65536

(define (f n) (A 0 n))
;; Expression = 2n
(define (g n) (A 1 n))
;;; (A 1 2)
;;; (A (- 1 1)(A 1 (- 2 1)))
;;; (A 0(A 1 1))
;;; (A 0 2)
;;; (* 2 2)
;;; 4

;;; (A 1 5)
;;; (A (- 1 1)(A 1 (- 5 1)))
;;; (A 0 (A 1 4))
;;; (A 0 (A (- 1 1)(A 1 (- 4 1))))
;;; (A 0 (A 0 (A 1 3)))
;;; (A 0 (A 0 (A 1 3)))

;;; Expression 2 power n

(define (h n) (A 2 n))
;;; Sample: (A (- x 1)(A x (- y 1)))
;;;(A 2 3)
;;;(A (- 2 1)(A 2 (- 3 1)))
;;;(A 1 (A 2 2))
;;;(A 1 (A (- 2 1)(A 2 (- 2 1))))
;;;(A 1 (A 1 (A 2 1)))
;;;(A 1 (A 1 (A (- 2 1)(A 2 (- 1 1)))))
;;;(A 1 (A 1 (A 1 (A 2 0))))
;;;(A 1 (A 1 (A 1 (A 2 0))))
;;;(A 1 (A 1 (A 1 0)))


(define (k n) (* 5 n n))
;;; 5n2

(h 1)
(h 2)
(h 3)
(h 4)
(h 5)
(h 6)
(h 7)
(h 8)